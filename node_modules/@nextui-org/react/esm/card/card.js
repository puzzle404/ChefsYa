"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _image = _interopRequireDefault(require("../image"));

var _drip = _interopRequireDefault(require("../utils/drip"));

var _useDrip = _interopRequireDefault(require("../use-drip"));

var _useTheme = _interopRequireDefault(require("../use-theme"));

var _collections = require("../utils/collections");

var _useKeyboard = _interopRequireWildcard(require("../use-keyboard"));

var _card = require("./card.styles");

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _assertion = require("../utils/assertion");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  animated: true,
  ripple: true,
  cover: false,
  preventDefault: false
};

const Card = /*#__PURE__*/_react.default.forwardRef(({ ...cardProps
}, ref) => {
  const {
    children,
    cover,
    animated,
    ripple,
    clickable,
    onClick,
    preventDefault,
    ...props
  } = cardProps;
  const cardRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, () => cardRef.current);
  const {
    isDark
  } = (0, _useTheme.default)();
  const {
    onClick: onDripClickHandler,
    ...dripBindings
  } = (0, _useDrip.default)(false, cardRef);
  const [withoutHeaderChildren, headerChildren] = (0, _collections.pickChild)(children, _card.StyledCardHeader);
  const [withoutFooterChildren, footerChildren] = (0, _collections.pickChild)(withoutHeaderChildren, _card.StyledCardFooter);
  const [withoutImageChildren, imageChildren] = (0, _collections.pickChild)(withoutFooterChildren, _image.default);
  const hasContent = (0, _collections.hasChild)(withoutImageChildren, _card.StyledCardBody);
  const hasHeader = (0, _collections.hasChild)(children, _card.StyledCardHeader);

  const clickHandler = event => {
    if (animated && cardRef.current) {
      onDripClickHandler(event);
    }

    onClick && onClick(event);
  };

  const {
    bindings
  } = (0, _useKeyboard.default)(event => {
    if (!clickable) {
      return;
    }

    clickHandler(event);
  }, [_useKeyboard.KeyCode.Enter, _useKeyboard.KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_card.StyledCard, {
    ref: cardRef,
    role: clickable ? 'button' : 'section',
    cover: cover,
    animated: animated,
    clickable: clickable,
    tabIndex: clickable ? 0 : -1,
    onClick: clickHandler,
    isDark: isDark,
    ...props,
    ...bindings,
    children: [hasHeader ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [headerChildren, imageChildren]
    }) : imageChildren, hasContent ? withoutImageChildren : !cover ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_card.StyledCardBody, {
      children: withoutImageChildren
    }) : null, clickable && animated && ripple && /*#__PURE__*/(0, _jsxRuntime.jsx)(_drip.default, { ...dripBindings
    }), footerChildren]
  });
});

if (_assertion.__DEV__) {
  Card.displayName = 'NextUI - Card';
}

Card.toString = () => '.nextui-card';

var _default = (0, _withDefaults.default)(Card, defaultProps);

exports.default = _default;
module.exports = exports.default;