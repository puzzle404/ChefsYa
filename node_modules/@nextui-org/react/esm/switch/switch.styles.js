"use strict";

exports.__esModule = true;
exports.StyledSwitchInput = exports.StyledSwitchContainer = exports.StyledSwitchCircle = exports.StyledSwitch = void 0;

var _stitches = require("../theme/stitches.config");

const StyledSwitchContainer = (0, _stitches.styled)('label', {
  WebkitTapHighlightColor: 'transparent',
  d: 'inline-block',
  verticalAlign: 'center',
  whiteSpace: 'nowrap',
  us: 'none',
  transition: '$default',
  padding: '$1 0',
  position: 'relative',
  cursor: 'pointer',
  '@motion': {
    transition: 'none'
  },
  variants: {
    color: {
      default: {
        $$switchColor: '$colors$primary',
        $$switchColorShadow: '$colors$primaryLight',
        $$switchColorHover: '$colors$primaryDark'
      },
      primary: {
        $$switchColor: '$colors$primary',
        $$switchColorShadow: '$colors$primaryLight',
        $$switchColorHover: '$colors$primaryDark'
      },
      secondary: {
        $$switchColor: '$colors$secondary',
        $$switchColorShadow: '$colors$secondaryLight',
        $$switchColorHover: '$colors$secondaryDark'
      },
      success: {
        $$switchColor: '$colors$success',
        $$switchColorShadow: '$colors$successLight',
        $$switchColorHover: '$colors$successDark'
      },
      warning: {
        $$switchColor: '$colors$warning',
        $$switchColorShadow: '$colors$warningLight',
        $$switchColorHover: '$colors$warningDark'
      },
      error: {
        $$switchColor: '$colors$error',
        $$switchColorShadow: '$colors$errorLight',
        $$switchColorHover: '$colors$errorDark'
      }
    },
    size: {
      xs: {
        $$switchWidth: '$space$12',
        $$switchHeight: '$space$9',
        width: ' $$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      sm: {
        $$switchWidth: '$space$14',
        $$switchHeight: '$space$10',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      md: {
        $$switchWidth: '$space$15',
        $$switchHeight: '$space$11',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      lg: {
        $$switchWidth: '$space$17',
        $$switchHeight: '$space$12',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      xl: {
        $$switchWidth: '$space$18',
        $$switchHeight: '$space$13',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      }
    },
    borderWeight: {
      light: {
        $$switchBorderW: '$borderWeights$light'
      },
      normal: {
        $$switchBorderW: '$borderWeights$normal'
      },
      bold: {
        $$switchBorderW: '$borderWeights$bold'
      },
      extrabold: {
        $$switchBorderW: '$borderWeights$extrabold'
      },
      black: {
        $$switchBorderW: '$borderWeights$black'
      }
    },
    disabled: {
      true: {
        cursor: 'not-allowed'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    }
  },
  defaultVariants: {
    color: 'default',
    size: 'md',
    borderWeight: 'normal'
  }
});
exports.StyledSwitchContainer = StyledSwitchContainer;
const StyledSwitchInput = (0, _stitches.styled)('input', {}, _stitches.sharedVisuallyHidden);
exports.StyledSwitchInput = StyledSwitchInput;
const StyledSwitchCircle = (0, _stitches.styled)('span', {
  position: 'absolute',
  display: 'flex',
  size: 'calc($$switchHeight * 0.7)',
  jc: 'center',
  ai: 'center',
  top: '50%',
  transform: 'translateY(-50%)',
  left: 'calc($$switchWidth / 15)',
  transition: 'left 0.25s ease, width 0.2s ease',
  bg: '$background',
  br: '$pill',
  '& svg': {
    bg: 'transparent',
    size: 'calc($$switchHeight * 0.44)'
  },
  '@motion': {
    transition: 'none'
  }
});
exports.StyledSwitchCircle = StyledSwitchCircle;
const StyledSwitch = (0, _stitches.styled)('div', {
  opacity: 1,
  width: '$$switchWidth',
  height: '$$switchHeight',
  transition: '$default',
  position: 'relative',
  overflow: 'hidden',
  padding: 0,
  br: '$pill',
  bg: '$accents2',
  '@motion': {
    transition: 'none'
  },
  variants: {
    checked: {
      true: {
        bg: '$$switchColor',
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc(100% - ($$switchWidth / 15) - $$switchHeight * 0.7)'
        },
        '&:hover:not(&:active)': {
          bg: '$$switchColorHover'
        }
      }
    },
    bordered: {
      true: {
        bg: 'transparent',
        border: '$$switchBorderW solid $border',
        '&:hover': {
          borderColor: '$$switchColor'
        },
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc(($$switchWidth / 15) - ($$switchBorderW / 2))',
          bg: '$accents2'
        }
      }
    },
    squared: {
      true: {
        br: '2px',
        [`& ${StyledSwitchCircle}`]: {
          br: '2px'
        }
      }
    },
    shadow: {
      true: {}
    },
    disabled: {
      true: {
        borderColor: '$accents2',
        bg: '$accents2',
        [`& ${StyledSwitchCircle}`]: {
          bg: '$accents3'
        }
      }
    },
    animated: {
      true: {
        '&:active': {
          [`& ${StyledSwitchCircle}`]: {
            width: 'calc($$switchHeight * 0.7 + ($$switchWidth / 10))'
          }
        }
      },
      false: {
        transition: 'none',
        [`& ${StyledSwitchCircle}`]: {
          transition: 'none'
        }
      }
    }
  },
  compoundVariants: [{
    // checked && disabled
    checked: true,
    disabled: true,
    css: {
      bg: '$accents3',
      [`& ${StyledSwitchCircle}`]: {
        bg: '$accents2'
      },
      '&:hover:not(&:active)': {
        bg: '$accents3'
      }
    }
  }, // shadow && checked
  {
    shadow: true,
    checked: true,
    css: {
      normalShadowVar: '$$switchColorShadow'
    }
  }, // animated && !checked
  {
    animated: true,
    checked: false,
    css: {
      '&:active': {
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc($$switchWidth / 7.5)'
        }
      }
    }
  }, // animated && checked
  {
    animated: true,
    checked: true,
    css: {
      '&:active': {
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc(100% - ($$switchWidth / 5) - $$switchHeight * 0.7)'
        }
      }
    }
  }, // checked && bordered
  {
    checked: true,
    bordered: true,
    css: {
      bg: '$$switchColor',
      border: '$$switchBorderW solid transparent',
      '&:hover:not(&:active)': {
        borderColor: 'transparent'
      },
      [`& ${StyledSwitchCircle}`]: {
        left: 'calc(100% - ($$switchWidth / 15) - $$switchHeight * 0.7 + ($$switchBorderW / 2))',
        bg: '$background'
      }
    }
  }]
}, _stitches.sharedFocus); // types

exports.StyledSwitch = StyledSwitch;