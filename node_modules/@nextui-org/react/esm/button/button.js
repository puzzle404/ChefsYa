"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useWarning = _interopRequireDefault(require("../use-warning"));

var _drip = _interopRequireDefault(require("../utils/drip"));

var _utils = require("./utils");

var _buttonGroupContext = require("./button-group-context");

var _buttonIcon = _interopRequireDefault(require("./button-icon"));

var _clsx = _interopRequireDefault(require("../utils/clsx"));

var _useDrip = _interopRequireDefault(require("../use-drip"));

var _button = _interopRequireDefault(require("./button.styles"));

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _assertion = require("../utils/assertion");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  clickable: true,
  ghost: false,
  bordered: false,
  ripple: true,
  animated: true,
  disabled: false,
  className: ''
};

const Button = /*#__PURE__*/_react.default.forwardRef(({ ...btnProps
}, ref) => {
  const buttonRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, () => buttonRef.current);
  const groupConfig = (0, _buttonGroupContext.useButtonGroupContext)();
  const filteredProps = (0, _utils.filterPropsWithGroup)(btnProps, groupConfig);
  /* eslint-disable @typescript-eslint/no-unused-vars */

  const {
    flat,
    children,
    disabled,
    animated,
    light,
    ripple,
    bordered,
    borderWeight,
    onClick,
    icon,
    iconRight,
    ghost,
    clickable,
    className,
    ...props
  } = filteredProps;
  /* eslint-enable @typescript-eslint/no-unused-vars */

  if (_assertion.__DEV__ && filteredProps.color === 'gradient' && (flat || light)) {
    (0, _useWarning.default)('Using the gradient color on flat and light buttons will have no effect.');
  }

  const hasIcon = icon || iconRight;
  const isRight = Boolean(iconRight);
  const {
    onClick: onDripClickHandler,
    ...dripBindings
  } = (0, _useDrip.default)(false, buttonRef);

  const clickHandler = event => {
    if (disabled || !clickable) return;

    if (animated && ripple && buttonRef.current) {
      onDripClickHandler(event);
    }

    onClick && onClick(event);
  };

  const getState = (0, _react.useMemo)(() => {
    return disabled ? 'disabled' : 'ready';
  }, [disabled]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_button.default, {
    ref: buttonRef,
    borderWeight: borderWeight,
    flat: flat,
    light: light,
    ghost: ghost,
    bordered: bordered || ghost,
    clickable: clickable,
    "data-state": getState,
    disabled: disabled,
    animated: animated,
    onClick: clickHandler,
    className: (0, _clsx.default)('nextui-button', `nextui-button--${getState}`, className),
    ...props,
    children: [_react.default.Children.count(children) === 0 ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_buttonIcon.default, {
      isRight: isRight,
      isSingle: true,
      children: hasIcon
    }) : hasIcon ? /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_buttonIcon.default, {
        isRight: isRight,
        children: hasIcon
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: (0, _clsx.default)('nextui-button-text', {
          'nextui-button-text-right': isRight,
          'nextui-button-text-left': !isRight
        }),
        children: children
      })]
    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      className: "nextui-button-text",
      children: children
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_drip.default, {
      color: "white",
      ...dripBindings
    })]
  });
});

if (_assertion.__DEV__) {
  Button.displayName = 'NextUI - Button';
}

Button.toString = () => '.nextui-button';

var _default = (0, _withDefaults.default)(Button, defaultProps);

exports.default = _default;
module.exports = exports.default;