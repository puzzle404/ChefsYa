"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _checkboxContext = require("./checkbox-context");

var _useWarning = _interopRequireDefault(require("../use-warning"));

var _useKeyboard = _interopRequireWildcard(require("../use-keyboard"));

var _checkbox = require("./checkbox.styles");

var _clsx = _interopRequireDefault(require("../utils/clsx"));

var _assertion = require("../utils/assertion");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  value: '',
  size: 'md',
  color: 'default',
  labelColor: 'default',
  disabled: false,
  preventDefault: true,
  initialChecked: false,
  indeterminate: false,
  rounded: false,
  line: false,
  animated: true,
  className: ''
};

const Checkbox = ({
  checked,
  initialChecked,
  line,
  rounded,
  indeterminate,
  disabled,
  onChange,
  size,
  className,
  children,
  label,
  color,
  labelColor,
  animated,
  value,
  preventDefault,
  ...props
}) => {
  const [selfChecked, setSelfChecked] = (0, _react.useState)(initialChecked);
  const {
    color: groupColor,
    labelColor: labelGroupColor,
    size: groupSize,
    updateState,
    inGroup,
    disabledAll,
    values
  } = (0, _checkboxContext.useCheckbox)();
  const isDisabled = inGroup ? disabledAll || disabled : disabled;
  const checkboxColor = color !== 'default' ? color : groupColor;
  const checkboxSize = size !== 'md' ? size : groupSize;
  const textColor = labelColor !== 'default' ? labelColor : labelGroupColor;

  if (_assertion.__DEV__ && inGroup && checked) {
    (0, _useWarning.default)('Remove props "checked" when [Checkbox] component is in the group.', 'Checkbox');
  }

  if (inGroup) {
    (0, _react.useEffect)(() => {
      const next = values.includes(value);
      if (next === selfChecked) return;
      setSelfChecked(next);
    }, [values.join(',')]);
  }

  const changeHandle = (0, _react.useCallback)(ev => {
    if (isDisabled) return;
    const selfEvent = {
      target: {
        checked: !selfChecked
      },
      stopPropagation: ev.stopPropagation,
      preventDefault: ev.preventDefault,
      nativeEvent: ev
    };

    if (inGroup && updateState) {
      updateState && updateState(value, !selfChecked);
    }

    setSelfChecked(!selfChecked);
    onChange && onChange(selfEvent);
  }, [updateState, onChange, isDisabled, selfChecked]);
  (0, _react.useEffect)(() => {
    if (checked === undefined) return;
    setSelfChecked(checked);
  }, [checked]);
  const {
    bindings
  } = (0, _useKeyboard.default)(event => {
    changeHandle(event);
  }, [_useKeyboard.KeyCode.Enter, _useKeyboard.KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const getState = (0, _react.useMemo)(() => {
    return selfChecked && indeterminate ? 'mixed' : selfChecked ? 'checked' : 'uncheked';
  }, [selfChecked, indeterminate]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_checkbox.StyledCheckboxLabel, {
    size: checkboxSize,
    disabled: isDisabled,
    animated: animated,
    className: (0, _clsx.default)('nextui-checkbox-label', `nextui-checkbox--${getState}`, className),
    css: props.css,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_checkbox.StyledCheckboxContainer, {
      className: "nextui-checkbox-container",
      tabIndex: isDisabled ? -1 : 0,
      color: checkboxColor,
      rounded: rounded,
      disabled: isDisabled,
      animated: animated,
      ...bindings,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_checkbox.StyledCheckboxInput, {
        type: "checkbox",
        className: "nextui-checkbox-input",
        tabIndex: -1,
        "data-state": getState,
        disabled: isDisabled,
        checked: selfChecked,
        "aria-checked": selfChecked && indeterminate ? 'mixed' : selfChecked,
        "aria-disabled": isDisabled,
        onChange: changeHandle,
        ...props
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_checkbox.StyledCheckboxMask, {
        checked: selfChecked,
        animated: animated,
        className: "nextui-checkbox-mask",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_checkbox.StyledIconCheck, {
          size: checkboxSize,
          indeterminate: indeterminate,
          checked: selfChecked,
          animated: animated,
          className: "nextui-icon-check",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_checkbox.StyledIconCheckFirstLine, {
            indeterminate: indeterminate,
            checked: selfChecked,
            animated: animated,
            className: "nextui-icon-check-line1"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_checkbox.StyledIconCheckSecondLine, {
            indeterminate: indeterminate,
            checked: selfChecked,
            animated: animated,
            className: "nextui-icon-check-line2"
          })]
        })
      })]
    }), (children || label) && /*#__PURE__*/(0, _jsxRuntime.jsx)(_checkbox.StyledCheckboxText, {
      className: "nextui-checkbox-text",
      color: textColor,
      line: line,
      checked: selfChecked,
      disabled: isDisabled,
      animated: animated,
      children: children || label
    })]
  });
};

Checkbox.defaultProps = defaultProps;

Checkbox.toString = () => '.nextui-checkbox';

if (_assertion.__DEV__) {
  Checkbox.displayName = 'NextUI - Checkbox';
}

var _default = Checkbox;
exports.default = _default;
module.exports = exports.default;