"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.setChildrenIndex = exports.pickChild = exports.pick = exports.isMac = exports.isChildElement = exports.isBrowser = exports.hasChild = exports.getId = exports.flattenArray = void 0;

var _react = _interopRequireDefault(require("react"));

const getId = () => {
  return Math.random().toString(32).slice(2, 10);
};

exports.getId = getId;

const hasChild = (children, child) => {
  const types = _react.default.Children.map(children, item => {
    if (! /*#__PURE__*/_react.default.isValidElement(item)) return null;
    return item.type;
  });

  return (types || []).includes(child);
};

exports.hasChild = hasChild;

const pick = (props, obj) => props.reduce((acc, prop) => {
  acc[prop] = obj[prop];
  return acc;
}, {});

exports.pick = pick;

const pickChild = (children, targetChild) => {
  let target = [];

  const withoutTargetChildren = _react.default.Children.map(children, item => {
    if (! /*#__PURE__*/_react.default.isValidElement(item)) return item;

    if (item.type === targetChild) {
      target.push(item);
      return null;
    }

    return item;
  });

  const targetChildren = target.length >= 0 ? target : undefined;
  return [withoutTargetChildren, targetChildren];
};

exports.pickChild = pickChild;

const isChildElement = (parent, child) => {
  if (!parent || !child) return false; // eslint-disable-next-line no-undef

  let node = child;

  while (node) {
    if (node === parent) return true;
    node = node.parentNode;
  }

  return false;
};

exports.isChildElement = isChildElement;

const isBrowser = () => {
  return Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
};

exports.isBrowser = isBrowser;

const isMac = () => {
  if (!isBrowser()) return false;
  return navigator.platform.toUpperCase().indexOf('MAC') >= 0;
};

exports.isMac = isMac;

const setChildrenIndex = (children, targetComponents = []) => {
  if (_react.default.Children.count(children) === 0) return [];
  const allowAll = targetComponents.length === 0;

  const clone = (child, props = {}) => /*#__PURE__*/_react.default.cloneElement(child, props);

  let index = 0;
  return _react.default.Children.map(children, item => {
    if (! /*#__PURE__*/_react.default.isValidElement(item)) return item;
    index = index + 1;
    if (allowAll) return clone(item, {
      index
    });
    const isAllowed = targetComponents.find(child => child === item.type);
    if (isAllowed) return clone(item, {
      index
    });
    index = index - 1;
    return item;
  });
};

exports.setChildrenIndex = setChildrenIndex;

const flattenArray = arr => {
  return arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flattenArray(val) : val), []);
};

exports.flattenArray = flattenArray;