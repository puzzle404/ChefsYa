"use strict";

exports.__esModule = true;
exports.isNormalColor = exports.isHex = exports.isCssVar = exports.isColor = exports.invertHex = exports.hexToRgb = exports.hexToRGBA = exports.hexFromString = exports.getCssVar = exports.colorToRgbValues = exports.addColorAlpha = void 0;

var _propTypes = require("./prop-types");

const getCssVar = name => {
  if (typeof document !== 'undefined' || !name) {
    const property = isCssVar(name) ? name.replace('var(', '').replace(')', '') : `--${name}`;
    return getComputedStyle(document.documentElement).getPropertyValue(property);
  }

  return '';
};

exports.getCssVar = getCssVar;

const isCssVar = property => {
  return property && (property == null ? void 0 : property.indexOf('var(')) === 0 ? true : false;
};
/**
 * This function allows validate if a string is a hexadecimal
 * value
 * @param str [string] hexadecimal value
 * @returns result [boolean]
 */


exports.isCssVar = isCssVar;

const isHex = str => {
  const exp = /#[a-fA-F0-9]{3,6}/g;
  return exp.test(str);
};
/**
 *
 * @param hex [string]
 * @param alpha [number]
 * @returns [string]
 */


exports.isHex = isHex;

const hexToRGBA = (hex, alpha = 1) => {
  let r = 0,
      g = 0,
      b = 0; // 3 digits

  if (hex.length == 4) {
    r = '0x' + hex[1] + hex[1];
    g = '0x' + hex[2] + hex[2];
    b = '0x' + hex[3] + hex[3]; // 6 digits
  } else if (hex.length == 7) {
    r = '0x' + hex[1] + hex[2];
    g = '0x' + hex[3] + hex[4];
    b = '0x' + hex[5] + hex[6];
  }

  return `rgba(${+r}, ${+g},${+b},${alpha})`;
};

exports.hexToRGBA = hexToRGBA;

const isNormalColor = color => {
  let found = _propTypes.normalColors.find(el => el === color);

  return found !== undefined && found !== null;
};
/**
 * Function that checks color name support in the current browser
 * @param strColor
 * @returns boolean
 */


exports.isNormalColor = isNormalColor;

const isColor = strColor => {
  let s = new Option().style;
  s.color = strColor;
  return s.color == strColor;
};

exports.isColor = isColor;

const hexToRgb = color => {
  const fullReg = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  const full = color.replace(fullReg, (_, r, g, b) => `${r}${r}${g}${g}${b}${b}`);
  const values = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(full);

  if (!values) {
    throw new Error(`Next UI: Unsupported ${color} color.`);
  }

  return [Number.parseInt(values[1], 16), Number.parseInt(values[2], 16), Number.parseInt(values[3], 16)];
};

exports.hexToRgb = hexToRgb;

const hexFromString = (str, defaultColor = '', returnLast = false) => {
  const fullReg = /#[a-fA-F0-9]{6}|#[a-fA-F0-9]{3}$/g;
  const hexCodes = str.match(fullReg);

  if (hexCodes && hexCodes.length > 0) {
    return returnLast ? hexCodes[hexCodes.length - 1] : hexCodes;
  }

  return defaultColor;
};

exports.hexFromString = hexFromString;

const colorToRgbValues = colorProp => {
  const color = isCssVar(colorProp) ? getCssVar(colorProp) : colorProp;
  if (color.charAt(0) === '#') return hexToRgb(color);
  const safeColor = color.replace(/ /g, '');
  const colorType = color.substr(0, 4);
  const regArray = safeColor.match(/\((.+)\)/);

  if (!colorType.startsWith('rgb') || !regArray) {
    throw new Error(`Next UI: Only support ["RGB", "RGBA", "HEX"] color.`);
  }

  return regArray[1].split(',').map(str => Number.parseFloat(str));
};

exports.colorToRgbValues = colorToRgbValues;

const addColorAlpha = (colorProp, alpha = 1) => {
  if (!colorProp) return '';
  const color = isCssVar(colorProp) ? getCssVar(colorProp) : colorProp;

  if (isHex(color)) {
    return hexToRGBA(color, alpha);
  } else if (!/^#|rgb|RGB/.test(color)) {
    return color;
  }

  const [r, g, b] = colorToRgbValues(color);
  const safeAlpha = alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;
  return `rgba(${r}, ${g}, ${b}, ${safeAlpha})`;
};

exports.addColorAlpha = addColorAlpha;

function padZero(str, len) {
  len = len || 2;
  var zeros = new Array(len).join('0');
  return (zeros + str).slice(-len);
}

const invertHex = (hexProp, smooth = true) => {
  let hex = isCssVar(hexProp) ? getCssVar(hexProp) : hexProp;

  if (hex.indexOf('#') === 0) {
    hex = hex.slice(1);
  } // convert 3-digit hex to 6-digits.


  if (hex.length === 3) {
    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }

  if (hex.length !== 6) {
    return hexProp;
  }

  let r = parseInt(hex.slice(0, 2), 16),
      g = parseInt(hex.slice(2, 4), 16),
      b = parseInt(hex.slice(4, 6), 16);

  if (smooth) {
    // http://stackoverflow.com/a/3943023/112731
    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#FFFFFF';
  } // invert color components


  r = 255 - r;
  g = 255 - g;
  b = 255 - b; // pad each with zeros and return

  return '#' + padZero(r.toString(16)) + padZero(g.toString(16)) + padZero(b.toString(16));
};

exports.invertHex = invertHex;