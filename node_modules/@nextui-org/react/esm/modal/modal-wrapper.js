"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _cssTransition = _interopRequireDefault(require("../utils/css-transition"));

var _collections = require("../utils/collections");

var _modalCloseButton = _interopRequireDefault(require("./modal-close-button"));

var _useKeyboard = require("../use-keyboard");

var _useTheme = _interopRequireDefault(require("../use-theme"));

var _modal = require("./modal.styles");

var _clsx = _interopRequireDefault(require("../utils/clsx"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  className: '',
  visible: false,
  rebound: false
};
const preClass = 'nextui-modal';

const ModalWrapper = ({
  className,
  children,
  visible,
  fullScreen,
  closeButton,
  rebound,
  animated,
  onCloseButtonClick,
  scroll,
  ...props
}) => {
  const modalContent = (0, _react.useRef)(null);
  const tabStart = (0, _react.useRef)(null);
  const tabEnd = (0, _react.useRef)(null);
  const [rendered, setRendered] = (0, _react.useState)(false);
  const {
    isDark
  } = (0, _useTheme.default)();
  (0, _react.useEffect)(() => {
    const timer = setTimeout(() => {
      setRendered(true);
      clearTimeout(timer);
    }, 300);
    return () => clearTimeout(timer);
  }, []);
  (0, _react.useEffect)(() => {
    if (!visible) return;
    const activeElement = document.activeElement;
    const isChild = (0, _collections.isChildElement)(modalContent.current, activeElement);
    if (isChild) return;
    tabStart.current && tabStart.current.focus();
  }, [visible]);

  const onKeyDown = event => {
    const isTabDown = event.keyCode === _useKeyboard.KeyCode.Tab;
    if (!visible || !isTabDown) return;
    const activeElement = document.activeElement;

    if (event.shiftKey) {
      if (activeElement === tabStart.current) {
        tabEnd.current && tabEnd.current.focus();
      }
    } else {
      if (activeElement === tabEnd.current) {
        tabStart.current && tabStart.current.focus();
      }
    }
  };

  const handleClose = () => {
    onCloseButtonClick && onCloseButtonClick();
  };

  const getState = (0, _react.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  const renderChildren = (0, _react.useMemo)(() => {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
      (0, _jsxRuntime.jsxs)(_modal.StyledModal, {
        role: "dialog",
        tabIndex: -1,
        "aria-modal": visible,
        ref: modalContent,
        "data-state": getState,
        fullScreen: fullScreen,
        scroll: scroll,
        closeButton: closeButton,
        isDark: isDark,
        className: (0, _clsx.default)(preClass, `${preClass}--${getState}`, {
          [`${preClass}-fullscreen`]: fullScreen,
          [`${preClass}-with-close-button`]: closeButton,
          [`${preClass}-rebound`]: rebound,
          [`${preClass}-rendered`]: rendered
        }, className),
        ...props,
        onKeyDown: onKeyDown,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_modal.StyledModalHideTab, {
          role: "button",
          tabIndex: 0,
          className: `${preClass}-hide-tab`,
          "aria-hidden": "true",
          ref: tabStart
        }), closeButton && /*#__PURE__*/(0, _jsxRuntime.jsx)(_modalCloseButton.default, {
          onClick: handleClose
        }), children, /*#__PURE__*/(0, _jsxRuntime.jsx)(_modal.StyledModalHideTab, {
          role: "button",
          tabIndex: 0,
          className: `${preClass}-hide-tab`,
          "aria-hidden": "true",
          ref: tabEnd
        })]
      })
    );
  }, [rebound, children]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: animated ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_cssTransition.default, {
      name: `${preClass}-wrapper`,
      visible: visible,
      enterTime: 20,
      leaveTime: 20,
      clearTime: 300,
      children: renderChildren
    }) : visible ? renderChildren : null
  });
};

ModalWrapper.toString = () => '.nextui-modal-wrapper';

var _default = (0, _withDefaults.default)(ModalWrapper, defaultProps);

exports.default = _default;
module.exports = exports.default;