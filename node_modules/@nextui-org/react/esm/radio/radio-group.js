"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _radioContext = require("./radio-context");

var _radio = require("./radio.styles");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  disabled: false,
  size: 'md',
  color: 'default',
  textColor: 'default'
};

const RadioGroup = ({
  disabled,
  onChange,
  value,
  size,
  color,
  textColor,
  children,
  initialValue,
  ...props
}) => {
  const [selfVal, setSelfVal] = (0, _react.useState)(initialValue);

  const updateState = nextValue => {
    setSelfVal(nextValue);
    onChange && onChange(nextValue);
  };

  const providerValue = (0, _react.useMemo)(() => {
    return {
      updateState,
      disabledAll: disabled,
      inGroup: true,
      size,
      color,
      textColor,
      value: selfVal
    };
  }, [disabled, selfVal]);
  (0, _react.useEffect)(() => {
    if (value === undefined) return;
    setSelfVal(value);
  }, [value]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_radioContext.RadioContext.Provider, {
    value: providerValue,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_radio.StyledRadioGroup, {
      role: "radiogroup",
      size: size,
      ...props,
      children: children
    })
  });
};

RadioGroup.toString = () => '.nextui-radio-group';

var _default = (0, _withDefaults.default)(RadioGroup, defaultProps);

exports.default = _default;
module.exports = exports.default;