"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _snippetIcon = _interopRequireDefault(require("./snippet-icon"));

var _useClipboard = _interopRequireDefault(require("../use-clipboard"));

var _snippet = require("./snippet.styles");

var _assertion = require("../utils/assertion");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  symbol: '$',
  showTooltip: true,
  copy: 'default',
  tooltipColor: 'default',
  tooltipCopyText: 'Copy',
  tooltipCopiedText: 'Copied'
};

const textArrayToString = text => {
  return text.reduce((pre, current) => {
    if (!current) return pre;
    return pre ? `${pre}\n${current}` : current;
  }, '');
};

const Snippet = ({
  bordered,
  children,
  symbol,
  showTooltip,
  text,
  tooltipCopyText,
  tooltipCopiedText,
  tooltipColor,
  copy: copyType,
  ...props
}) => {
  const [copied, setCopied] = (0, _react.useState)(false);
  const {
    copy
  } = (0, _useClipboard.default)();
  const ref = (0, _react.useRef)(null);
  const isMultiLine = text && Array.isArray(text);
  const showCopyIcon = (0, _react.useMemo)(() => copyType !== 'prevent', [copyType]);
  const childText = (0, _react.useMemo)(() => {
    if (isMultiLine) return textArrayToString(text);
    if (!children) return text;
    if (!ref.current) return '';
    return ref.current.textContent;
  }, [ref.current, children, text]);
  const symbolBefore = (0, _react.useMemo)(() => {
    const str = symbol.trim();
    return str ? `${str} ` : '';
  }, [symbol]);

  const clickHandler = () => {
    if (!childText || !showCopyIcon) return;
    copy(childText);
    if (copyType === 'slient') return;
    setCopied(true);
  };

  const handleTooltipVisibleChange = () => {
    setTimeout(() => {
      setCopied(false);
    }, 300);
  };

  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_snippet.StyledSnippet, { ...props,
    children: [isMultiLine ? text.map((t, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_snippet.StyledSnippetPre, {
      css: {
        '&:before': {
          content: symbolBefore,
          us: 'none'
        }
      },
      className: "nextui-snippet-pre",
      children: t
    }, `${index}-${t}`)) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_snippet.StyledSnippetPre, {
      css: {
        '&:before': {
          content: symbolBefore,
          us: 'none'
        }
      },
      className: "nextui-snippet-pre",
      ref: ref,
      children: children || text
    }), showCopyIcon && copyType !== 'slient' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_tooltip.default, {
      hideArrow: true,
      rounded: true,
      color: tooltipColor,
      content: copied ? tooltipCopiedText : tooltipCopyText,
      onVisibleChange: handleTooltipVisibleChange,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_snippet.StyledSnippetCopyButton, {
        className: "nextui-snippet-copy-button",
        onClick: clickHandler,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_snippetIcon.default, {})
      })
    }) : copyType !== 'prevent' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_snippet.StyledSnippetCopyButton, {
      className: "nextui-snippet-copy-button",
      onClick: clickHandler,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_snippetIcon.default, {})
    })]
  });
};

if (_assertion.__DEV__) {
  Snippet.displayName = 'NextUI - Snippet';
}

Snippet.toString = () => '.nextui-snippet';

const MemoSnippet = /*#__PURE__*/_react.default.memo(Snippet);

var _default = (0, _withDefaults.default)(MemoSnippet, defaultProps);

exports.default = _default;
module.exports = exports.default;