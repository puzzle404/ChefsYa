"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _usePortal = _interopRequireDefault(require("../use-portal"));

var _useResize = _interopRequireDefault(require("../use-resize"));

var _cssTransition = _interopRequireDefault(require("../utils/css-transition"));

var _useClickAnywhere = _interopRequireDefault(require("../use-click-anywhere"));

var _placement = require("./placement");

var _clsx = _interopRequireDefault(require("../utils/clsx"));

var _tooltip = require("./tooltip.styles");

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  placement: 'top',
  offset: 12,
  className: ''
};
const preClass = 'nextui-tooltip';

const TooltipContent = ({
  children,
  parent,
  visible,
  offset,
  placement,
  rounded,
  animated,
  className,
  hideArrow,
  css,
  ...props
}) => {
  const el = (0, _usePortal.default)('tooltip');
  const selfRef = (0, _react.useRef)(null);
  const [rect, setRect] = (0, _react.useState)(_placement.defaultTooltipPlacement);
  if (!parent) return null;

  const updateRect = () => {
    const pos = (0, _placement.getPlacement)(placement, (0, _placement.getRect)(parent), offset);
    setRect(pos);
  };

  const {
    transform,
    top,
    left,
    right,
    bottom
  } = (0, _react.useMemo)(() => (0, _placement.getIconPlacement)(placement, 5), [placement]);
  (0, _useResize.default)(updateRect);
  (0, _useClickAnywhere.default)(() => updateRect());
  (0, _react.useEffect)(() => {
    updateRect();
  }, [visible]);

  const preventHandler = event => {
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
  };

  const getState = (0, _react.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  if (!el) return null;
  return /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_cssTransition.default, {
    name: `${preClass}-wrapper`,
    visible: visible,
    enterTime: 20,
    leaveTime: 20,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_tooltip.StyledTooltipContent, {
      className: (0, _clsx.default)(`${preClass}-content`, `${preClass}--${getState}`, className),
      "data-state": getState,
      ref: selfRef,
      onClick: preventHandler,
      animated: animated,
      css: {
        left: rect.left,
        top: `calc(${rect.top} + 6px)`,
        transform: rect.transform,
        [`&.${preClass}-wrapper-enter-active`]: {
          opacity: 1,
          top: rect.top
        },
        ...css
      },
      ...props,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_tooltip.StyledTooltip, {
        role: "tooltip",
        "data-state": getState,
        hideArrow: hideArrow,
        className: (0, _clsx.default)(preClass, {
          [`${preClass}--with-arrow`]: !hideArrow
        }),
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_tooltip.StyledTooltipArrow, {
          className: `${preClass}-arrow`,
          css: {
            left,
            top,
            right,
            bottom,
            transform
          }
        }), children]
      })
    })
  }), el);
};

TooltipContent.toString = () => '.nextui-tooltip-content';

var _default = (0, _withDefaults.default)(TooltipContent, defaultProps);

exports.default = _default;
module.exports = exports.default;