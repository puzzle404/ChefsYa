"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.getTokenValue = exports.getThemeName = exports.getDocumentTheme = exports.getDocumentCSSTokens = exports.changeTheme = void 0;

var _common = _interopRequireDefault(require("./common"));

var _lightTheme = _interopRequireDefault(require("./light-theme"));

var _clsx = _interopRequireDefault(require("../utils/clsx"));

const getTokenValue = (token, tokenName) => {
  if (!document || !token) return '';
  let docStyle = getComputedStyle(document.documentElement);
  const tokenKey = `--${_common.default.prefix}-${token}-${tokenName}`;
  const tokenValue = docStyle.getPropertyValue(tokenKey);

  if (tokenValue && tokenValue.includes('var')) {
    getTokenValue(token, tokenValue);
  }

  return tokenValue;
};

exports.getTokenValue = getTokenValue;

const getDocumentCSSTokens = () => {
  const colorKeys = [...Object.keys(_common.default.theme.colors), ...Object.keys(_lightTheme.default.colors)];
  const shadowKeys = Object.keys(_lightTheme.default.shadows);
  /**
   * accents1: {
   *    prefix: "nextui"
   *    scale: "colors"
   *    token: "accents1"
   *    value: "var(--nextui-colors-gray100)"
   * }
   */

  const colorTokens = colorKeys.reduce((acc, crr) => {
    const color = getTokenValue('colors', crr);

    if (color) {
      acc[crr] = {
        prefix: _common.default.prefix,
        scale: 'colors',
        token: crr,
        value: color
      };
    }

    return acc;
  }, {});
  const shadowTokens = shadowKeys.reduce((acc, crr) => {
    const shadow = getTokenValue('shadows', crr);

    if (shadow) {
      acc[crr] = {
        prefix: _common.default.prefix,
        scale: 'shadows',
        token: crr,
        value: shadow
      };
    }

    return acc;
  }, {});
  return {
    colors: colorTokens,
    shadows: shadowTokens
  };
};
/**
 * Returns active theme according to the given document
 */


exports.getDocumentCSSTokens = getDocumentCSSTokens;

const getDocumentTheme = el => {
  var _el$getAttribute;

  const styleAttrValues = (el == null ? void 0 : (_el$getAttribute = el.getAttribute('style')) == null ? void 0 : _el$getAttribute.split(';').map(el => el.trim()).filter(el => el.includes('color-scheme'))) || [];
  const colorScheme = styleAttrValues.length > 0 ? styleAttrValues[0].replace('color-scheme: ', '').replace(';', '') : '';
  const documentTheme = el == null ? void 0 : el.getAttribute('data-theme');
  return documentTheme || colorScheme;
};

exports.getDocumentTheme = getDocumentTheme;

const getThemeName = theme => {
  if (typeof theme === 'string') {
    return theme != null && theme.includes('-theme') ? theme == null ? void 0 : theme.replace('-theme', '') : theme;
  }

  return theme;
};

exports.getThemeName = getThemeName;

const changeTheme = theme => {
  var _el$getAttribute2, _el$getAttribute3;

  if (!document) return;
  const el = document.documentElement;
  const prevClasses = (el == null ? void 0 : (_el$getAttribute2 = el.getAttribute('class')) == null ? void 0 : _el$getAttribute2.split(' ').filter(cls => !cls.includes('theme') && !cls.includes('light') && !cls.includes('dark'))) || [];
  const prevStyles = (el == null ? void 0 : (_el$getAttribute3 = el.getAttribute('style')) == null ? void 0 : _el$getAttribute3.split(';').filter(stl => !stl.includes('color-scheme')).map(el => `${el};`)) || [];
  el == null ? void 0 : el.setAttribute('class', (0, _clsx.default)(prevClasses, `${getThemeName(theme)}-theme`));
  el == null ? void 0 : el.setAttribute('style', (0, _clsx.default)(prevStyles, `color-scheme: ${theme};`));
};

exports.changeTheme = changeTheme;