"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.theme = exports.styled = exports.sharedVisuallyHidden = exports.sharedFocus = exports.keyframes = exports.globalCss = exports.getStitchesTheme = exports.getCssText = exports.css = exports.createThemeBase = exports.createTheme = exports.config = void 0;

var _react = require("@stitches/react");

var _common = _interopRequireDefault(require("./common"));

var _lightTheme = _interopRequireDefault(require("./light-theme"));

var _darkTheme = _interopRequireDefault(require("./dark-theme"));

var _deepMerge = _interopRequireDefault(require("../utils/deep-merge"));

const getStitchesTheme = targetTheme => {
  return (0, _deepMerge.default)(targetTheme, _common.default.theme);
};

exports.getStitchesTheme = getStitchesTheme;
const stitches = (0, _react.createStitches)({ ..._common.default,
  theme: { ..._common.default.theme,
    shadows: { ..._lightTheme.default.shadows
    },
    colors: { ..._common.default.theme.colors,
      ..._lightTheme.default.colors
    }
  }
});
const createThemeBase = stitches.createTheme;
exports.createThemeBase = createThemeBase;
const styled = stitches.styled;
exports.styled = styled;
const css = stitches.css;
exports.css = css;
const globalCss = stitches.globalCss;
exports.globalCss = globalCss;
const keyframes = stitches.keyframes;
exports.keyframes = keyframes;
const getCssText = stitches.getCssText;
exports.getCssText = getCssText;
const theme = stitches.theme;
exports.theme = theme;
const config = stitches.config;
exports.config = config;
const sharedFocus = css({
  WebkitTapHighlightColor: 'transparent',
  '&:focus:not(&:focus-visible)': {
    boxShadow: 'none'
  },
  '&:focus': {
    outline: 'none',
    boxShadow: '0 0 0 2px $colors$background, 0 0 0 4px $colors$primary'
  },
  '@safari': {
    WebkitTapHighlightColor: 'transparent',
    outline: 'none'
  }
});
exports.sharedFocus = sharedFocus;
const sharedVisuallyHidden = css({
  border: '0px',
  clip: 'rect(0px, 0px, 0px, 0px)',
  height: '1px',
  width: '1px',
  margin: '-1px',
  padding: '0px',
  overflow: 'hidden',
  whiteSpace: 'nowrap',
  position: 'absolute'
});
exports.sharedVisuallyHidden = sharedVisuallyHidden;

const createTheme = ({
  type,
  theme,
  className
}) => {
  if (!type) {
    throw new Error('Theme type is required');
  }

  return createThemeBase(className || `${type}-theme`, (0, _deepMerge.default)(type === 'dark' ? _darkTheme.default : _lightTheme.default, theme));
};

exports.createTheme = createTheme;