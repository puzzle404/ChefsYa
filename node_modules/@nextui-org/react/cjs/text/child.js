"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _color = require("../utils/color");

var _text = require("./text.styles");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  color: 'default'
};

const TextChild = ({
  children,
  tag,
  className,
  color: userColor,
  transform,
  margin: marginProp,
  size,
  css,
  ...props
}) => {
  const color = (0, _react.useMemo)(() => {
    if ((0, _color.isNormalColor)(userColor)) {
      switch (userColor) {
        case 'default':
          return '$text';

        default:
          return `$${userColor}`;
      }
    }

    return userColor;
  }, [userColor]);
  const fontSize = (0, _react.useMemo)(() => {
    if (!size) return 'inherit';
    if (typeof size === 'number') return `${size}px`;
    return size;
  }, [size]);
  const margin = (0, _react.useMemo)(() => {
    if (!marginProp) return 'inherit';
    if (typeof marginProp === 'number') return `${size}px`;
    return marginProp;
  }, [marginProp]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_react.default.Fragment, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_text.StyledText, {
      as: tag,
      css: {
        color,
        fontSize: size ? fontSize : '',
        margin,
        tt: transform,
        ...css
      },
      ...props,
      children: children
    })
  });
};

TextChild.toString = () => '.nextui-text-child';

const MemoTextChild = /*#__PURE__*/_react.default.memo(TextChild);

var _default = (0, _withDefaults.default)(MemoTextChild, defaultProps);

exports.default = _default;
module.exports = exports.default;