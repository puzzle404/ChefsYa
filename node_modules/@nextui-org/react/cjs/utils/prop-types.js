"use strict";

exports.__esModule = true;
exports.tuple = exports.textWeights = exports.textTransforms = exports.simpleColors = exports.normalWeights = exports.normalLoaders = exports.normalColors = exports.extraColors = exports.extendedColorsNoGradient = exports.extendedColors = exports.excludedInputPropsForTextarea = void 0;

const tuple = (...args) => args;

exports.tuple = tuple;
const normalSizes = tuple('xs', 'sm', 'md', 'lg', 'xl');
const normalColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'gradient');
exports.normalColors = normalColors;
const simpleColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error');
exports.simpleColors = simpleColors;
const extendedColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'invert', 'gradient');
exports.extendedColors = extendedColors;
const extendedColorsNoGradient = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'invert');
exports.extendedColorsNoGradient = extendedColorsNoGradient;
const extraColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'dark', 'lite', 'alert', 'purple', 'violet', 'gradient', 'cyan');
exports.extraColors = extraColors;
const normalLoaders = tuple('default', 'points', 'points-opacity', 'gradient', 'spinner');
exports.normalLoaders = normalLoaders;
const normalWeights = tuple('light', 'normal', 'bold', 'extrabold', 'black');
exports.normalWeights = normalWeights;
const textWeights = tuple(
/* Keyword values */
'normal', 'bold',
/* Keyword values relative to the parent */
'lighter', 'bolder',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
exports.textWeights = textWeights;
const textTransforms = tuple(
/* Keyword values */
'none', 'capitalize', 'uppercase', 'lowercase', 'full-width', 'full-size-kana',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
exports.textTransforms = textTransforms;
const copyTypes = tuple('default', 'slient', 'prevent');
const triggerTypes = tuple('hover', 'click');
const placement = tuple('top', 'topStart', 'topEnd', 'left', 'leftStart', 'leftEnd', 'bottom', 'bottomStart', 'bottomEnd', 'right', 'rightStart', 'rightEnd');
const position = tuple('static', 'relative', 'absolute', 'fixed', 'sticky',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
const objectFit = tuple('contain', 'cover', 'fill', 'none', 'scale-down',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
const dividerAlign = tuple('start', 'center', 'end', 'left', 'right');
const justify = tuple('flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly');
const alignItems = tuple('flex-start', 'flex-end', 'center', 'stretch', 'baseline');
const alignContent = tuple('stretch', 'center', 'flex-start', 'flex-end', 'space-between', 'space-around');
const direction = tuple('row', 'row-reverse', 'column', 'column-reverse');
const wrap = tuple('nowrap', 'wrap', 'wrap-reverse');
const display = tuple('flex', 'block', 'grid', 'inline', 'inline-block', 'inline-flex', 'inline-grid');
const contentPosition = tuple('left', 'right');
const excludedInputPropsForTextarea = tuple('clearable', 'as', 'rounded', 'labelLeft', 'labelRight', 'contentLeft', 'contentRight', 'contentClickable', 'contentLeftStyling', 'contentRightStyling', 'onContentClick', 'onClearClick', 'css');
exports.excludedInputPropsForTextarea = excludedInputPropsForTextarea;