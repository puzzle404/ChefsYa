"use strict";

exports.__esModule = true;
exports.default = exports.DOTS = void 0;

var _react = require("react");

var _numbers = require("../utils/numbers");

const DOTS = 'dots';
exports.DOTS = DOTS;

const usePagination = ({
  page,
  total,
  siblings = 1,
  boundaries = 1,
  initialPage = 1,
  onChange
}) => {
  const [activePage, setActivePage] = (0, _react.useState)(page || initialPage);

  const onChangeActivePage = newPage => {
    setActivePage(newPage);
    onChange && onChange(newPage);
  };

  const setPage = (0, _react.useCallback)(pageNumber => {
    if (pageNumber <= 0) {
      onChangeActivePage(1);
    } else if (pageNumber > total) {
      onChangeActivePage(total);
    } else {
      onChangeActivePage(pageNumber);
    }
  }, [total]);

  const next = () => setPage(activePage + 1);

  const previous = () => setPage(activePage - 1);

  const first = () => setPage(1);

  const last = () => setPage(total);

  const paginationRange = (0, _react.useMemo)(() => {
    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;

    if (totalPageNumbers >= total) {
      return (0, _numbers.range)(1, total);
    }

    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);
    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);
    /*
     * We do not want to show dots if there is only one position left
     * after/before the left/right page count as that would lead to a change if our Pagination
     * component size which we do not want
     */

    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;
    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);

    if (!shouldShowLeftDots && shouldShowRightDots) {
      const leftItemCount = siblings * 2 + boundaries + 2;
      return [...(0, _numbers.range)(1, leftItemCount), DOTS, ...(0, _numbers.range)(total - (boundaries - 1), total)];
    }

    if (shouldShowLeftDots && !shouldShowRightDots) {
      const rightItemCount = boundaries + 1 + 2 * siblings;
      return [...(0, _numbers.range)(1, boundaries), DOTS, ...(0, _numbers.range)(total - rightItemCount, total)];
    }

    return [...(0, _numbers.range)(1, boundaries), DOTS, ...(0, _numbers.range)(leftSiblingIndex, rightSiblingIndex), DOTS, ...(0, _numbers.range)(total - boundaries + 1, total)];
  }, [total, siblings, activePage]);
  return {
    range: paginationRange,
    active: activePage,
    setPage,
    next,
    previous,
    first,
    last
  };
};

var _default = usePagination;
exports.default = _default;