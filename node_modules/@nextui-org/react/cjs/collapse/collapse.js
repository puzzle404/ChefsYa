"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _collapseIcon = _interopRequireDefault(require("./collapse-icon"));

var _expand = _interopRequireDefault(require("../utils/expand"));

var _collapseContext = require("./collapse-context");

var _useCurrentState = _interopRequireDefault(require("../use-current-state"));

var _useWarning = _interopRequireDefault(require("../use-warning"));

var _useTheme = _interopRequireDefault(require("../use-theme"));

var _collections = require("../utils/collections");

var _useKeyboard = _interopRequireWildcard(require("../use-keyboard"));

var _collapse = require("./collapse.styles");

var _clsx = _interopRequireDefault(require("../utils/clsx"));

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  shadow: false,
  divider: true,
  bordered: false,
  showArrow: true,
  animated: true,
  disabled: false,
  preventDefault: true,
  expanded: false
};
const preClass = 'nextui-collapse';

const Collapse = ({
  children,
  title,
  subtitle,
  expanded,
  shadow,
  className,
  divider,
  arrowIcon,
  showArrow,
  disabled,
  onChange,
  bordered,
  contentLeft,
  preventDefault,
  animated: animatedProp,
  borderWeight,
  index,
  ...props
}) => {
  const [visible, setVisible, visibleRef] = (0, _useCurrentState.default)(expanded);
  const {
    isDark
  } = (0, _useTheme.default)();
  const {
    values,
    divider: groupDivider,
    animated: groupAnimated,
    updateValues
  } = (0, _collapseContext.useCollapseContext)();

  if (!title) {
    (0, _useWarning.default)('"title" is required.', 'Collapse');
  }

  (0, _react.useEffect)(() => {
    if (visible !== expanded) {
      setVisible(expanded);
    }
  }, [expanded]);
  (0, _react.useEffect)(() => {
    if (!values.length) return;
    const isActive = !!values.find(item => item === index);
    setVisible(isActive);
  }, [values.join(',')]);
  const arrowComponent = (0, _react.useMemo)(() => {
    if (!showArrow) return null;
    return arrowIcon ? arrowIcon : /*#__PURE__*/(0, _jsxRuntime.jsx)(_collapseIcon.default, {});
  }, [arrowIcon, showArrow]);
  const withDivider = groupDivider === undefined ? divider : groupDivider;
  const animated = (0, _react.useMemo)(() => {
    return groupAnimated === undefined ? animatedProp : groupAnimated;
  }, [groupAnimated, animatedProp]);
  const {
    ariaLabelledById,
    ariaControlId
  } = (0, _react.useMemo)(() => {
    const nextuiId = (0, _collections.getId)();
    return {
      ariaLabelledById: `${preClass}-button-${nextuiId}`,
      ariaControlId: `${preClass}-${nextuiId}`
    };
  }, []);

  const handleChange = event => {
    if (disabled) return;
    const next = !visibleRef.current;
    setVisible(next);
    updateValues && updateValues(index, next);
    onChange && onChange(event, index, next);
  };

  const {
    bindings
  } = (0, _useKeyboard.default)(event => {
    handleChange(event);
  }, [_useKeyboard.KeyCode.Enter, _useKeyboard.KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const getState = (0, _react.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_collapse.StyledCollapse, {
    tabIndex: disabled ? -1 : 0,
    shadow: shadow,
    bordered: bordered,
    animated: animated,
    divider: withDivider,
    borderWeight: borderWeight,
    visible: visible,
    "data-state": getState,
    className: (0, _clsx.default)(className, preClass, `${preClass}--${getState}`),
    isDark: isDark,
    ...props,
    ...bindings,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_collapse.StyledCollapseView, {
      role: "button",
      tabIndex: -1,
      id: ariaLabelledById,
      className: `${preClass}-view`,
      "data-state": getState,
      disabled: disabled,
      "aria-disabled": disabled,
      "aria-expanded": visible,
      "aria-controls": ariaControlId,
      onClick: handleChange,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: (0, _clsx.default)(`${preClass}-title-container`),
        children: [contentLeft && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: `${preClass}-title-content-left`,
          children: contentLeft
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: `${preClass}-title-content`,
          children: [/*#__PURE__*/_react.default.isValidElement(title) ? title : /*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
            className: `${preClass}-title`,
            children: title
          }), subtitle && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: `${preClass}-subtitle`,
            children: subtitle
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: `${preClass}-title-content-right`,
          children: arrowComponent
        })]
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_expand.default, {
      isExpanded: visible,
      animated: animated,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_collapse.StyledCollapseContent, {
        role: "region",
        tabIndex: -1,
        id: ariaControlId,
        "aria-labelledby": ariaLabelledById,
        className: `${preClass}-content`,
        children: children
      })
    })]
  });
};

Collapse.toString = () => '.nextui-collapse';

var _default = (0, _withDefaults.default)(Collapse, defaultProps);

exports.default = _default;
module.exports = exports.default;