"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _usePortal = _interopRequireDefault(require("../use-portal"));

var _modalWrapper = _interopRequireDefault(require("./modal-wrapper"));

var _backdrop = _interopRequireDefault(require("../backdrop"));

var _modalContext = require("./modal-context");

var _useBodyScroll = _interopRequireDefault(require("../use-body-scroll"));

var _useCurrentState = _interopRequireDefault(require("../use-current-state"));

var _useKeyboard = _interopRequireWildcard(require("../use-keyboard"));

var _assertion = require("../utils/assertion");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  width: '400px',
  className: '',
  preventClose: false,
  fullScreen: false,
  closeButton: false,
  animated: true,
  blur: false,
  scroll: false,
  noPadding: false
};

const Modal = ({
  children,
  onClose,
  onOpen,
  open,
  autoMargin,
  width: wrapperWidth,
  className,
  preventClose,
  blur,
  animated,
  fullScreen,
  noPadding,
  ...props
}) => {
  const portal = (0, _usePortal.default)('modal');
  const [, setBodyHidden] = (0, _useBodyScroll.default)(null, {
    scrollLayer: true
  });
  const [visible, setVisible, visibleRef] = (0, _useCurrentState.default)(false);
  const [rebound, setRebound] = (0, _react.useState)(false);

  const closeModal = () => {
    onClose && onClose();
    setVisible(false);
    setBodyHidden(false);
  };

  (0, _react.useEffect)(() => {
    if (open === undefined) return;

    if (open) {
      onOpen && onOpen();
    }

    if (!open && visibleRef.current) {
      onClose && onClose();
    }

    setVisible(open);
    setBodyHidden(open);
  }, [open]);

  const toggleRebound = () => {
    setRebound(true);
    const timer = setTimeout(() => {
      setRebound(false);
      clearTimeout(timer);
    }, 300);
  };

  const {
    bindings
  } = (0, _useKeyboard.default)(() => {
    if (preventClose) {
      toggleRebound();
      return;
    }

    closeModal();
  }, _useKeyboard.KeyCode.Escape, {
    disableGlobalEvent: true,
    preventDefault: true
  });

  const closeFromBackdrop = () => {
    if (preventClose) {
      toggleRebound();
      return;
    }

    closeModal();
  };

  const modalConfig = (0, _react.useMemo)(() => ({
    close: closeModal,
    autoMargin,
    noPadding
  }), []);
  if (!portal) return null;
  return /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_modalContext.ModalContext.Provider, {
    value: modalConfig,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_backdrop.default, {
      onClick: closeFromBackdrop,
      visible: visible,
      maxWidth: wrapperWidth,
      fullScreen: fullScreen,
      blur: blur,
      animated: animated,
      ...bindings,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_modalWrapper.default, {
        visible: visible,
        onCloseButtonClick: closeModal,
        className: className,
        fullScreen: fullScreen,
        rebound: rebound,
        animated: animated,
        ...props,
        children: children
      })
    })
  }), portal);
};

if (_assertion.__DEV__) {
  _backdrop.default.displayName = 'NextUI - Modal';
}

Modal.toString = () => '.nextui-modal';

Modal.defaultProps = defaultProps;
var _default = Modal;
exports.default = _default;
module.exports = exports.default;