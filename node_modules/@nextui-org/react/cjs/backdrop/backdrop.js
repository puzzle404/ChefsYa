"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _cssTransition = _interopRequireDefault(require("../utils/css-transition"));

var _useCurrentState = _interopRequireDefault(require("../use-current-state"));

var _clsx = _interopRequireDefault(require("../utils/clsx"));

var _useKeyboard = _interopRequireWildcard(require("../use-keyboard"));

var _backdrop = require("./backdrop.styles");

var _assertion = require("../utils/assertion");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable @typescript-eslint/no-explicit-any */
const defaultProps = {
  onClick: () => {},
  visible: false,
  blur: false,
  animated: true,
  preventDefault: true,
  opacity: 0.5,
  className: ''
};
const preClass = 'nextui-backdrop';

const Backdrop = /*#__PURE__*/_react.default.memo(({
  children,
  onClick,
  onKeyPress,
  visible,
  maxWidth,
  blur,
  animated,
  opacity,
  preventDefault,
  className,
  css,
  ...props
}) => {
  const [, setIsContentMouseDown, IsContentMouseDownRef] = (0, _useCurrentState.default)(false);

  const clickHandler = event => {
    if (IsContentMouseDownRef.current) return;
    onClick && onClick(event);
  };

  const childrenClickHandler = (0, _react.useCallback)(event => {
    event.stopPropagation();
  }, []);

  const mouseUpHandler = () => {
    if (!IsContentMouseDownRef.current) return;
    const timer = setTimeout(() => {
      setIsContentMouseDown(false);
      clearTimeout(timer);
    }, 0);
  };

  const {
    bindings
  } = (0, _useKeyboard.default)(ev => {
    onKeyPress && onKeyPress(ev);
  }, [_useKeyboard.KeyCode.Escape, _useKeyboard.KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const getState = (0, _react.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  const renderChildren = (0, _react.useMemo)(() => {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_backdrop.StyledBackdrop, {
      tabIndex: -1,
      role: "button",
      "aria-hidden": true,
      "data-state": getState,
      onClick: clickHandler,
      onMouseUp: mouseUpHandler,
      css: {
        $$backdropOpacity: opacity,
        ...css
      },
      className: (0, _clsx.default)(preClass, `${preClass}--${getState}`, className),
      ...bindings,
      ...props,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_backdrop.StyledBackdropLayer, {
        className: (0, _clsx.default)(`${preClass}-layer`, blur ? `${preClass}-layer-blur` : `${preClass}-layer-default`),
        animated: animated,
        blur: blur
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_backdrop.StyledBackdropContent, {
        className: `${preClass}-content`,
        onClick: childrenClickHandler,
        css: {
          maxWidth
        },
        onMouseDown: () => setIsContentMouseDown(true),
        children: children
      })]
    });
  }, [children]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: animated ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_cssTransition.default, {
      name: `${preClass}-wrapper`,
      visible: visible,
      enterTime: 20,
      leaveTime: 20,
      clearTime: 150,
      children: renderChildren
    }) : visible ? renderChildren : null
  });
});

if (_assertion.__DEV__) {
  Backdrop.displayName = 'NextUI - Backdrop';
}

Backdrop.toString = () => '.nextui-backdrop';

var _default = (0, _withDefaults.default)(Backdrop, defaultProps);

exports.default = _default;
module.exports = exports.default;