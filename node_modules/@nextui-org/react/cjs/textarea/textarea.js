"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _input = _interopRequireDefault(require("../input"));

var _useResize = _interopRequireDefault(require("../use-resize"));

var _useWarning = _interopRequireDefault(require("../use-warning"));

var _propTypes = require("../utils/prop-types");

var _assertion = require("../utils/assertion");

var _utils = require("./utils");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  minRows: 3,
  maxRows: 6,
  cacheMeasurements: true,
  initialValue: ''
};

const Textarea = /*#__PURE__*/_react.default.forwardRef((textareaProps, ref) => {
  const textareaRef = (0, _react.useRef)(null);

  const heightRef = _react.default.useRef(0);

  const measurementsCacheRef = _react.default.useRef();

  const {
    cacheMeasurements,
    rows,
    maxRows,
    minRows,
    onChange,
    onHeightChange,
    css,
    ...props
  } = textareaProps;
  Object.keys(props).forEach(propNameKey => {
    if (_propTypes.excludedInputPropsForTextarea.indexOf(propNameKey) > -1) {
      // @ts-ignored
      delete props[propNameKey];
    }
  });
  const isControlled = props.value !== undefined;

  if (_assertion.__DEV__ && props.style) {
    if ('maxHeight' in props.style) {
      (0, _useWarning.default)('Using `style.maxHeight` for <Textarea/> is not supported. Please use `maxRows`.');
    }

    if ('minHeight' in props.style) {
      (0, _useWarning.default)('Using `style.minHeight` for <Textarea/> is not supported. Please use `minRows`.');
    }
  }

  (0, _react.useImperativeHandle)(ref, () => textareaRef.current);

  const resizeTextarea = () => {
    const node = textareaRef.current;
    const nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : (0, _utils.getSizingData)(node);

    if (!nodeSizingData) {
      return;
    }

    measurementsCacheRef.current = nodeSizingData;
    const [height, rowHeight] = (0, _utils.calculateNodeHeight)(nodeSizingData, node.value || node.placeholder || 'x', rows || minRows, rows || maxRows);

    if (heightRef.current !== height) {
      heightRef.current = height;
      node.style.setProperty('height', `${height}px`, 'important');
      onHeightChange && onHeightChange(height, {
        rowHeight
      });
    }
  };

  const handleChange = event => {
    if (!isControlled) {
      resizeTextarea();
    }

    onChange && onChange(event);
  };

  if (typeof document !== 'undefined') {
    (0, _react.useLayoutEffect)(resizeTextarea);
    (0, _useResize.default)(resizeTextarea);
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_input.default, {
    as: "textarea",
    ref: textareaRef,
    onChange: handleChange,
    css: { ...css
    },
    ...props
  });
});

if (_assertion.__DEV__) {
  Textarea.displayName = 'NextUI - Textarea';
}

Textarea.toString = () => '.nextui-textarea';

var _default = (0, _withDefaults.default)(Textarea, defaultProps);

exports.default = _default;
module.exports = exports.default;