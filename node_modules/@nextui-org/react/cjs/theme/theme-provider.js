"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _cssBaseline = _interopRequireDefault(require("../css-baseline"));

var _themeContext = _interopRequireWildcard(require("./theme-context"));

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _deepMerge = _interopRequireDefault(require("../utils/deep-merge"));

var _object = require("../utils/object");

var _utils = require("./utils");

var _useSsr = _interopRequireDefault(require("../use-ssr"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  disableBaseline: false
};

const ThemeProvider = ({
  theme: userTheme,
  disableBaseline,
  children
}) => {
  const {
    isBrowser
  } = (0, _useSsr.default)();
  const [currentTheme, setCurrentTheme] = (0, _react.useState)(_themeContext.defaultContext.type);

  const changeCurrentTheme = type => {
    setCurrentTheme(ct => ct !== type ? type : ct);
  };

  const changeTypeBaseEl = el => {
    const themeValue = (0, _utils.getDocumentTheme)(el);
    themeValue && changeCurrentTheme(themeValue);
  };

  const providerValue = (0, _react.useMemo)(() => {
    const themeTokens = isBrowser ? (0, _utils.getDocumentCSSTokens)() : {};
    const theme = (0, _deepMerge.default)((0, _object.copyObject)(_themeContext.defaultContext.theme), themeTokens);
    const themeName = (0, _utils.getThemeName)(currentTheme);
    return {
      theme,
      type: themeName,
      isDark: themeName === 'dark'
    };
  }, [currentTheme, isBrowser]);
  (0, _react.useEffect)(() => {
    var _document, _document4, _document5;

    // initial set
    changeTypeBaseEl((_document = document) == null ? void 0 : _document.documentElement);
    const observer = new MutationObserver(mutation => {
      var _mutation$;

      if (mutation && mutation.length > 0 && ((_mutation$ = mutation[0]) == null ? void 0 : _mutation$.target.nodeName) === 'BODY') {
        var _document2, _document2$body, _document2$body$datas;

        const documentTheme = (_document2 = document) == null ? void 0 : (_document2$body = _document2.body) == null ? void 0 : (_document2$body$datas = _document2$body.dataset) == null ? void 0 : _document2$body$datas.theme;
        documentTheme && changeCurrentTheme(documentTheme);
      } else {
        var _document3;

        changeTypeBaseEl((_document3 = document) == null ? void 0 : _document3.documentElement);
      }
    });
    observer.observe((_document4 = document) == null ? void 0 : _document4.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme', 'style']
    });
    observer.observe((_document5 = document) == null ? void 0 : _document5.body, {
      attributes: true,
      attributeFilter: ['data-theme', 'style']
    });
    return () => observer.disconnect();
  }, []);
  (0, _react.useEffect)(() => {
    if (!isBrowser || !userTheme) {
      return;
    }

    if (userTheme != null && userTheme.className) {
      (0, _utils.changeTheme)(userTheme.className);
      changeCurrentTheme((0, _utils.getThemeName)(userTheme.className));
    }
  }, [isBrowser, userTheme]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_themeContext.default.Provider, {
    value: providerValue,
    children: [!disableBaseline && /*#__PURE__*/(0, _jsxRuntime.jsx)(_cssBaseline.default, {}), children]
  });
};

var _default = (0, _withDefaults.default)(ThemeProvider, defaultProps);

exports.default = _default;
module.exports = exports.default;