"use strict";

exports.__esModule = true;
exports.default = exports.StyledLinkIcon = exports.StyledLink = void 0;

var _stitches = require("../theme/stitches.config");

var _color = require("../utils/color");

var _theme$colors, _theme$colors$link, _theme$colors2, _theme$colors2$primar, _theme$colors3, _theme$colors3$second, _theme$colors4, _theme$colors4$second, _theme$colors5, _theme$colors5$succes, _theme$colors6, _theme$colors6$warnin, _theme$colors7, _theme$colors7$error;

const StyledLinkIcon = (0, _stitches.styled)('svg', {
  ml: '$1',
  as: 'center',
  display: 'inline-flex',
  color: 'currentColor'
});
exports.StyledLinkIcon = StyledLinkIcon;
const StyledLink = (0, _stitches.styled)('a', {
  display: 'inline-flex',
  alignItems: 'baseline',
  lineHeight: 'inherit',
  textDecoration: 'none',
  width: 'fitContent',
  '&:hover': {
    opacity: 0.8
  },
  '@motion': {
    transition: 'none'
  },
  variants: {
    color: {
      default: {
        color: '$link'
      },
      primary: {
        color: '$primary'
      },
      secondary: {
        color: '$secondary'
      },
      success: {
        color: '$success'
      },
      warning: {
        color: '$warning'
      },
      error: {
        color: '$error'
      }
    },
    underline: {
      true: {
        '&:hover, &:active, &:focus': {
          textDecoration: 'underline'
        }
      }
    },
    block: {
      true: {
        padding: '$2 $4',
        borderRadius: '$base'
      }
    },
    animated: {
      true: {
        transition: '$default'
      }
    }
  },
  compoundVariants: [{
    color: 'default',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: (0, _color.addColorAlpha)((_theme$colors = _stitches.theme.colors) == null ? void 0 : (_theme$colors$link = _theme$colors.link) == null ? void 0 : _theme$colors$link.value, 0.2)
      }
    }
  }, {
    color: 'primary',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: (0, _color.addColorAlpha)((_theme$colors2 = _stitches.theme.colors) == null ? void 0 : (_theme$colors2$primar = _theme$colors2.primary) == null ? void 0 : _theme$colors2$primar.value, 0.2)
      }
    }
  }, {
    color: 'secondary',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: (0, _color.addColorAlpha)((_theme$colors3 = _stitches.theme.colors) == null ? void 0 : (_theme$colors3$second = _theme$colors3.secondary) == null ? void 0 : _theme$colors3$second.value, 0.2)
      }
    }
  }, {
    color: 'secondary',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: (0, _color.addColorAlpha)((_theme$colors4 = _stitches.theme.colors) == null ? void 0 : (_theme$colors4$second = _theme$colors4.secondary) == null ? void 0 : _theme$colors4$second.value, 0.2)
      }
    }
  }, {
    color: 'success',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: (0, _color.addColorAlpha)((_theme$colors5 = _stitches.theme.colors) == null ? void 0 : (_theme$colors5$succes = _theme$colors5.success) == null ? void 0 : _theme$colors5$succes.value, 0.2)
      }
    }
  }, {
    color: 'warning',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: (0, _color.addColorAlpha)((_theme$colors6 = _stitches.theme.colors) == null ? void 0 : (_theme$colors6$warnin = _theme$colors6.warning) == null ? void 0 : _theme$colors6$warnin.value, 0.2)
      }
    }
  }, {
    color: 'error',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: (0, _color.addColorAlpha)((_theme$colors7 = _stitches.theme.colors) == null ? void 0 : (_theme$colors7$error = _theme$colors7.error) == null ? void 0 : _theme$colors7$error.value, 0.2)
      }
    }
  }],
  defaultVariants: {
    color: 'default',
    animated: true
  }
});
exports.StyledLink = StyledLink;
var _default = StyledLink;
exports.default = _default;